writeMATLABMat(fid, name, m, subst_list):= block([i, j],
    printf(fid, "~a= [~%", name),
    for i: 1 thru length(m) do (
        printf(fid, "    "),
        for j: 1 thru length(transpose(m)) do (
            printf(fid, "~a", (ssubst(")", "]", ssubst("(", "[", sremove("\\", string(subst(subst_list, m[i, j]))))))),
            if j#length(transpose(m)) then
                printf(fid, ", ")
        ),
        if i=length(m) then
            printf(fid, "~%")
        else
            printf(fid, ";~%")
    ),
    printf(fid, "];~%")
);

writeMATLAB_nonlinear(sys, file):= block([i, fid, f, y],
    fid: openw(file),
    
    subst_list: [],
    for i:1 thru length(sys@params) do
        subst_list: endcons(sys@params[i]=concat('param\., sys@params[i]), subst_list),
    f: subst(subst_list, sys@f),
    y: subst(subst_list, sys@outputs),
    
    printf(fid, "f= [~%"),
    for i: 1 thru length(f) do (
        printf(fid, "    ~a~%", (ssubst(")", "]", ssubst("(", "[", sremove("\\", string(f[i]))))))
    ),
    printf(fid, "];~%~%"),

    printf(fid, "y= [~%"),
    for i: 1 thru length(y) do (
        printf(fid, "    ~a~%", (ssubst(")", "]", ssubst("(", "[", sremove("\\", string(y[i]))))))
    ),
    printf(fid, "];~%"),
    
    close(fid)
);

writeMATLAB_linear(sys, file):= block([i, fid, subst_list],
    fid: openw(file),
    
    subst_list: [],
    for i:1 thru length(sys@params) do
        subst_list: endcons(sys@params[i]=concat('param\., sys@params[i]), subst_list),

        
    if length(sys@f_lin)>0 and length(sys@f_lin@E)>0 then (
        printf(fid, "~%"),
        writeMATLABMat(fid, "E", sys@f_lin@E, subst_list),
        printf(fid, "~%"),
        writeMATLABMat(fid, "A", sys@f_lin@A, subst_list),
        printf(fid, "~%"),
        writeMATLABMat(fid, "B", sys@f_lin@B, subst_list),
        printf(fid, "~%"),
        writeMATLABMat(fid, "C", sys@f_lin@C, subst_list),
        printf(fid, "~%"),
        writeMATLABMat(fid, "D", sys@f_lin@D, subst_list)
    ),
    
    close(fid)
);
