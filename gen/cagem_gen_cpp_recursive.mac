do_assign(n_work, e_work):= block([],
    gentran(lrsetq(eval(n_work), scanmap('float, subst(subst_list, e_work))))
);

cagem_gen_cpp_recursive(sysdef, [target_dir]):= block([i, j, i_, j_, file, title, nbrdof, nbrbody, nbrin, nbrdep, gravity, mass, IG, T0G, vG, omega, aG, omegad, vGpartial, omegapartial, BodyRef, ebody, elastic_dof_idx, pi, pdi, pddi, qi, qdi, FinalTime, StepSave, StepMax],
    file: sysdef@file,
    title: sysdef@name,
    nbrdof: sysdef@nbrdof,
    nbrbody: sysdef@nbrbody,
    nbrin: sysdef@nbrin,
    nbrdep: sysdef@nbrdep,
    gravity: sysdef@gravity,
    mass: sysdef@mass,
    IG: sysdef@IG,
    T0G: sysdef@T0G,
    vG: sysdef@vG,
    omega: sysdef@omega,
    aG: sysdef@aG,
    omegad: sysdef@omegad,
    vGpartial: sysdef@vGpartial,
    omegapartial: sysdef@omegapartial,
    BodyRef: sysdef@BodyRef,
    ebody: sysdef@ebody,
    elastic_dof_idx: sysdef@elastic_dof_idx,
    pi: sysdef@pi,
    pdi: sysdef@pdi,
    pddi: sysdef@pddi,
    qi: sysdef@qi,
    qdi: sysdef@qdi,
    FinalTime: sysdef@FinalTime,
    StepSave: sysdef@StepSave,
    StepMax: sysdef@StepMax,
    
    for i:1 thru nbrbody do (
        for j:1 thru nbrdof do (
            j_: j-1,
            vG[i]: subst(qdd[j_], qdd[j], vG[i]),
            vG[i]: subst(qd[j_], qd[j], vG[i]),
            vG[i]: subst(q[j_], q[j], vG[i]),
            omega[i]: subst(qdd[j_], qdd[j], omega[i]),
            omega[i]: subst(qd[j_], qd[j], omega[i]),
            omega[i]: subst(q[j_], q[j], omega[i]),
            aG[i]: subst(qdd[j_], qdd[j], aG[i]),
            aG[i]: subst(qd[j_], qd[j], aG[i]),
            aG[i]: subst(q[j_], q[j], aG[i]),
            omegad[i]: subst(qdd[j_], qdd[j], omegad[i]),
            omegad[i]: subst(qd[j_], qd[j], omegad[i]),
            omegad[i]: subst(q[j_], q[j], omegad[i]),
            T0G[i]: subst(qdd[j_], qdd[j], T0G[i]),
            T0G[i]: subst(qd[j_], qd[j], T0G[i]),
            T0G[i]: subst(q[j_], q[j], T0G[i]),
            vGpartial[i]: subst(qdd[j_], qdd[j], vGpartial[i]),
            vGpartial[i]: subst(qd[j_], qd[j], vGpartial[i]),
            vGpartial[i]: subst(q[j_], q[j], vGpartial[i]),
            omegapartial[i]: subst(qdd[j_], qdd[j], omegapartial[i]),
            omegapartial[i]: subst(qd[j_], qd[j], omegapartial[i]),
            omegapartial[i]: subst(q[j_], q[j], omegapartial[i])
        ),
        for j:1 thru nbrdep do (
            j_: j-1,
            vG[i]: subst(pdd[j_], pdd[j], vG[i]),
            vG[i]: subst(pd[j_], pd[j], vG[i]),
            vG[i]: subst(p[j_], p[j], vG[i]),
            omega[i]: subst(pdd[j_], pdd[j], omega[i]),
            omega[i]: subst(pd[j_], pd[j], omega[i]),
            omega[i]: subst(p[j_], p[j], omega[i]),
            aG[i]: subst(pdd[j_], pdd[j], aG[i]),
            aG[i]: subst(pd[j_], pd[j], aG[i]),
            aG[i]: subst(p[j_], p[j], aG[i]),
            omegad[i]: subst(pdd[j_], pdd[j], omegad[i]),
            omegad[i]: subst(pd[j_], pd[j], omegad[i]),
            omegad[i]: subst(p[j_], p[j], omegad[i]),
            T0G[i]: subst(pdd[j_], pdd[j], T0G[i]),
            T0G[i]: subst(pd[j_], pd[j], T0G[i]),
            T0G[i]: subst(p[j_], p[j], T0G[i]),
            vGpartial[i]: subst(pdd[j_], pdd[j], vGpartial[i]),
            vGpartial[i]: subst(pd[j_], pd[j], vGpartial[i]),
            vGpartial[i]: subst(p[j_], p[j], vGpartial[i]),
            omegapartial[i]: subst(pdd[j_], pdd[j], omegapartial[i]),
            omegapartial[i]: subst(pd[j_], pd[j], omegapartial[i]),
            omegapartial[i]: subst(p[j_], p[j], omegapartial[i])
        )
    ),
    for i:1 thru nbrdep do (
        for j:1 thru nbrdof do (
            j_: j-1,
            pi[i]: subst(qdd[j_], qdd[j], pi[i]),
            pi[i]: subst(qd[j_], qd[j], pi[i]),
            pi[i]: subst(q[j_], q[j], pi[i]),
            pdi[i]: subst(qdd[j_], qdd[j], pdi[i]),
            pdi[i]: subst(qd[j_], qd[j], pdi[i]),
            pdi[i]: subst(q[j_], q[j], pdi[i]),
            pddi[i]: subst(qdd[j_], qdd[j], pddi[i]),
            pddi[i]: subst(qd[j_], qd[j], pddi[i]),
            pddi[i]: subst(q[j_], q[j], pddi[i])
        ),
        for j:1 thru nbrdep do (
            j_: j-1,
            pi[i]: subst(pdd[j_], pdd[j], pi[i]),
            pi[i]: subst(pd[j_], pd[j], pi[i]),
            pi[i]: subst(p[j_], p[j], pi[i]),
            pdi[i]: subst(pdd[j_], pdd[j], pdi[i]),
            pdi[i]: subst(pd[j_], pd[j], pdi[i]),
            pdi[i]: subst(p[j_], p[j], pdi[i]),
            pddi[i]: subst(pdd[j_], pdd[j], pddi[i]),
            pddi[i]: subst(pd[j_], pd[j], pddi[i]),
            pddi[i]: subst(p[j_], p[j], pddi[i])
        )
    ),
    
    filepath: pathname_directory(file),
    if length(target_dir)>0 then (
        filepath: target_dir[1],
        if slength(filepath)>0 then
            if notequal(substring (filepath, slength(filepath), slength(filepath)+1),"/") then
                filepath: sconcat(filepath, "/")
    ),
    filename: pathname_name(file),
    
    load("gentran"),
    load(operatingsystem),

    gentranlang: 'c,
    genfloat: true,
    gentranseg: false,
    clinelen: 1000,
    
    out_name: sconcat(filepath, filename, "System.hpp"),
    if file_search(out_name)#false then delete_file(out_name),
    templ_name: ssubst("cadyn_cpp.tem", "cagem.mac", cagem_dir),

    user_file: sconcat(filename, ".AppEff.hpp"),
    gentranin(templ_name, [out_name]),
    
    app_file: sconcat(filepath, filename, "_app.cpp"),
    if file_search(app_file)=false then (
        app_file: sconcat(filepath, filename, "System.hpp"),
        if file_search(app_file)#false then delete_file(app_file),
        templ_name: ssubst("cadyn_cpp_app.tem", "cagem.mac", cagem_dir),

        user_file: sconcat(filename, ".AppEff.hpp"),
        gentranin(templ_name, [app_file])
    )
);


