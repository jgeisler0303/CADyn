<<block(
    load(cadyn_gen_util),
    load(cadyn_prepare_direct_variables),
    load(cadyn_prepare_parameters),
    
    cadyn_prepare_direct_variables(sysdef),
    cadyn_prepare_parameters(sysdef)
)$>><<gentran(literal("\/\* File generated form template cadyn_direct.cpp.tem on ", eval(timedate()), ". Do not edit! \*\/"))$>>
<<gentran(literal("\/\* Multibody system: ", eval(title), " \*\/"))$>>

#include <string>
#include <map>
#include <fstream>
#include <iostream>
#include <stdlib.h>
#include <chrono>
#include <cstdio>
#include <ctime>
#include <array>

#include "NewmarkBeta.hpp"

typedef double real_type;

#include "<<gentran(literal(eval(filename)))$>>_param.hpp"

#define mcond(c, a, x, b) ((c)? a:b)

class <<gentran(literal(eval(filename), ": public NewmarkBeta<", eval(nbrdof), ", ", eval(nbrin), ", ", eval(length(y)), ", real_type>"))$>> {
public:
    typedef Eigen::Matrix<real_type, <<gentran(literal(eval(nbrdep)))$>>, 1> VecP;
    
    <<gentran(literal(eval(filename)))$>>();
        
    void precalcConsts();
    virtual VecQ computeResiduals();
    virtual void calcJacobian(real_type alphaM, real_type alphaC, real_type alphaK);
    virtual void calcB();
    virtual void calcCDF();
    virtual void calcOut();
<<block([], 
    if length(external) > 0 then (
        gentran(literal("    void calculateExternal()\;", cr)),
        gentran(literal("    void calculateExternalWithDeriv()\;", cr))
    )
)$>>
    
    <<gentran(literal(eval(filename), "Parameters"))$>> param;
    
// private:
    VecP p, pd, pdd;

<<block([i],
    gentran(literal("    struct inputs_t {", cr)),
    gentran(literal("    public:", cr)),
    gentran(literal("        inputs_t(")),
    for i:1 thru nbrin do (
        gentran(literal("real_type &", eval(u[i]))),
        if i#nbrin then
            gentran(literal(", "))
    ),            
    gentran(literal(") : ")),
    for i:1 thru nbrin do (
        gentran(literal(eval(u[i]), "(", eval(u[i]), ")")),
        if i#nbrin then
            gentran(literal(", "))
    ),            
    gentran(literal(" {}\;", cr, cr)),
    for i:1 thru nbrin do (
        gentran(literal("        real_type &", eval(u[i]), "\;", cr))
    ),            
    gentran(literal("    } inputs\;", cr)),

    gentran(literal(cr)),
    gentran(literal("    struct outputs_t {", cr)),
    gentran(literal("    public:", cr)),
    gentran(literal("        outputs_t(")),
    for i:1 thru nbrout do (
        gentran(literal("real_type &", eval(output_names[i]))),
        if i#nbrout then
            gentran(literal(", "))
    ),            
    gentran(literal(") : ")),
    for i:1 thru nbrout do (
        gentran(literal(eval(output_names[i]), "(", eval(output_names[i]), ")")),
        if i#nbrout then
            gentran(literal(", "))
    ),            
    gentran(literal(" {}\;", cr, cr)),
    for i:1 thru nbrout do (
        gentran(literal("        real_type &", eval(output_names[i]), "\;", cr))
    ),            
    gentran(literal("    } outputs\;", cr)),

    if default_states=0 then (
        gentran(literal(cr, "    struct states_t {", cr)),
        gentran(literal("    public:", cr)),
        gentran(literal("        states_t(")),
        for i:1 thru nbrdof do (
            gentran(literal("real_type &", eval(states[i]), ", real_type &", eval(states_d[i]), ", real_type &", eval(states_dd[i]))),
            if i#nbrdof then
                gentran(literal(", "))
        ),            
        gentran(literal(") : ")),
        for i:1 thru nbrdof do (
            gentran(literal(eval(states[i]), "(", eval(states[i]), "), ", eval(states_d[i]),"(", eval(states_d[i]), "), ", eval(states_dd[i]),"(", eval(states_dd[i]), ")")),
            if i#nbrdof then
                gentran(literal(", "))
        ),            
        gentran(literal(" {}\;", cr, cr)),
                              
        for i:1 thru nbrdof do (
            gentran(literal("        real_type &", eval(states[i]), "\;", cr)),
            gentran(literal("        real_type &", eval(states_d[i]), "\;", cr)),
            gentran(literal("        real_type &", eval(states_dd[i]), "\;", cr))
        ),            
        gentran(literal("    } states\;", cr, cr)),

        gentran(literal(cr, "    typedef struct {", cr)),
        for i:1 thru nbrdof do (
            gentran(literal("        int ", eval(states[i]), "\;", cr))
        ),            
        gentran(literal("    } states_idx_type\;", cr)),
        
        gentran(literal(cr, "    typedef struct {", cr)),
        for i:1 thru nbrin do (
            gentran(literal("        int ", eval(u[i]), "\;", cr))
        ),            
        gentran(literal("    } inputs_idx_type\;", cr)),

        gentran(literal(cr, "    typedef struct {", cr)),
        for i:1 thru nbrout do (
            gentran(literal("        int ", eval(output_names[i]), "\;", cr))
        ),            
        gentran(literal("    } outputs_idx_type\;", cr))
    )
)$>>

    static const states_idx_type states_idx;
    static const inputs_idx_type inputs_idx;
    static const outputs_idx_type outputs_idx;
    
<<block([i], 
    for i:1 thru length(external) do
        gentran(literal("    real_type ", eval(external[i]), "\;", cr)),
        
    for i:1 thru length(d_external) do
        gentran(literal("    real_type ", eval(d_external[i]), "\;", cr))
)$>>

<<block([i], 
    for i:1 thru length(pre_calc_const) do
        gentran(literal("    real_type ", eval(first(pre_calc_const[i])), "\;", cr))
)$>>
};

const <<gentran(literal(eval(filename)))$>>::states_idx_type <<gentran(literal(eval(filename)))$>>::states_idx= {<<block([i], for i:1 thru nbrdof do (gentran(literal(eval(i-1))), if i#nbrdof then gentran(literal(", "))))$>>};
const <<gentran(literal(eval(filename)))$>>::inputs_idx_type <<gentran(literal(eval(filename)))$>>::inputs_idx= {<<block([i], for i:1 thru nbrin do (gentran(literal(eval(i-1))), if i#nbrin then gentran(literal(", "))))$>>};
const <<gentran(literal(eval(filename)))$>>::outputs_idx_type <<gentran(literal(eval(filename)))$>>::outputs_idx= {<<block([i], for i:1 thru nbrout do (gentran(literal(eval(i-1))), if i#nbrout then gentran(literal(", "))))$>>};

<<gentran(literal(eval(filename)))$>>::<<gentran(literal(eval(filename)))$>>() : 
    NewmarkBeta("<<gentran(literal(eval(filename)))$>>", "<<gentran(literal(eval(title)))$>>"),
    param(),
<<block([i],
        gentran(literal("    inputs(")),
    for i:1 thru nbrin do (
        gentran(literal("u.data()[", eval(i-1), "]")),
        if i#nbrin then
            gentran(literal(", "))
    ),
    gentran(literal("),", cr)),
    
    gentran(literal("    outputs(")),
    for i:1 thru nbrout do (
        gentran(literal("y.data()[", eval(i-1), "]")),
        if i#nbrout then
            gentran(literal(", "))
    ),            
    
    if default_states=0 then (
        gentran(literal("),", cr, "    states(")),
        for i:1 thru nbrdof do (
            gentran(literal("q.data()[", eval(i-1), "], qd.data()[", eval(i-1), "], qdd.data()[", eval(i-1), "]")),
            if i#nbrdof then
                gentran(literal(", "))
        )
    ),
    gentran(literal(")", cr))
)$>>{
<<block([i, i_, opt], 
        ccurrind: 4,
        save_subst_list: subst_list,
        subst_list: [],
        
        for i:1 thru nbrin do (
            i_: i-1,
            do_assign(concat("in_name[", i_, "]"), concat("\"", u[i], "\""))
        ),
        if default_states=0 then (
            gentran(literal(cr)),
            for i:1 thru nbrdof do (
                i_: i-1,
                do_assign(concat("state_name[", i_, "]"), concat("\"", states[i], "\""))
            )
        ),
        subst_list: save_subst_list
)$>>}

void <<gentran(literal(eval(filename)))$>>::precalcConsts() {
<<block([i],
    print(pre_calc_const),
    
    for i:1 thru length(pre_calc_const) do
        do_assign(first(pre_calc_const[i]), second(pre_calc_const[i])),
        
    if const_matrix_once=1 then (    
        gentran(literal(cr)),
        genmat(E, nbrdof, nbrdof, nbrdof, nbrdof, "M", 2),
        gentran(literal(cr)),
        genmat(-A, nbrdof, nbrdof, nbrdof, nbrdof, "C", 2),
        gentran(literal(cr)),
        genmat(-A, nbrdof, nbrdof, nbrdof, 0, "K", 2),
        
        gentran(literal(cr)),
        genmat(-B, nbrdof, nbrin, nbrdof, 0, "B", 2),
            
        gentran(literal(cr)),
        genmat(C, length(y), 2*nbrdof, 0, 0, "CD", 2),
        gentran(literal(cr)),
        genmat(D, length(y), nbrin, 0, 0, "CD.block(0, 2*nbrdof, nbrout, nbrin)", 2),
        gentran(literal(cr)),
        genmat(F, length(y), nbrdof, 0, 0, "F", 2)
    )
)$>>    
}

<<gentran(literal(eval(filename)))$>>::VecQ <<gentran(literal(eval(filename)))$>>::computeResiduals() {
    VecQ f_;
    
<<block([], 
    if length(external) > 0 then (
        gentran(literal("    calculateExternal()\;", cr, cr))
    )
)$>>
    {
<<block([i, i_, opt], 
    ccurrind: 8,

    if nbrdep > 0 then (
        gentran(literal("    // Dependant variables", cr)),
        gentran("    {", literal(cr)),
                    
        opt: genopt([pi, pdi, pddi]),
        gentran(literal(cr)),

        for i:1 thru nbrdep do (
            i_: i-1,
            do_assign('p[i_], opt[1][i]),
            do_assign('pd[i_], opt[2][i]),
            do_assign('pdd[i_], opt[3][i]),
            gentran(literal(cr))
        ),
        gentran("    }", literal(cr))        
    )
)$>>
    }
    {
<<block([i, i_, opt], 
    ccurrind: 8,

    opt: genopt([f]),
    gentran(literal(cr)),

    for i:1 thru nbrdof do (
        i_: i-1,
        do_assign(concat("f_[", i_, "]"), opt[1][i])
    )
)$>>
    }

    return f_;
}

void <<gentran(literal(eval(filename)))$>>::calcJacobian(real_type alphaM, real_type alphaC, real_type alphaK) {
<<block([], 
    if length(external) > 0 then (
        gentran(literal("    calculateExternalWithDeriv()\;", cr))
    )
)$>>
    {
<<block([i, i_, opt], 
    ccurrind: 8,

    if nbrdep > 0 then (
        gentran(literal("    // Dependant variables", cr)),
        gentran("    {", literal(cr)),
                    
        opt: genopt([pi, pdi, pddi]),
        gentran(literal(cr)),

        for i:1 thru nbrdep do (
            i_: i-1,
            do_assign('p[i_], opt[1][i]),
            do_assign('pd[i_], opt[2][i]),
            do_assign('pdd[i_], opt[3][i]),
            gentran(literal(cr))
        ),
        gentran("    }", literal(cr))        
    )
)$>>
    }
    {
<<block([i, i_, j, j_, opt], 
    ccurrind: 8,
    
    if const_matrix_once=1 then (    
        E_no_const: matrixmap(lambda([e], if constantp(e) then 0 else e), E),        
        A_no_const: matrixmap(lambda([e], if constantp(e) then 0 else e), A)
    ) else (
        E_no_const: E,
        A_no_const: A
    ),
        
    opt: genopt([f, E_no_const, -A_no_const, flatten(args(Ap)), flatten(args(Apd)), flatten(args(Apdd)), flatten(args(dp_dq)), flatten(args(dp_dp)), flatten(args(dpd_dq)), flatten(args(dpd_dp)), flatten(args(dpdd_dq)), flatten(args(dpdd_dqd)), flatten(args(dpdd_dqdd)), flatten(args(dpdd_dp)), flatten(args(dpdd_dpd))]),
    gentran(literal(cr)),

    genmat(opt[2], nbrdof, nbrdof, nbrdof, nbrdof, "M", const_matrix_once),
    gentran(literal(cr)),
    genmat(opt[3], nbrdof, nbrdof, nbrdof, nbrdof, "C", const_matrix_once),
    gentran(literal(cr)),
    genmat(opt[3], nbrdof, nbrdof, nbrdof, 0, "K", const_matrix_once),
    gentran(literal(cr)),

    if nbrdep > 0 then (
        gentran(literal("        // TODO make class members and write non-constant values only once", cr)),

        gentran(literal("        MatX Ap(nbrdof, nbrdep)\;", cr)),
        genmat(opt[4], nbrdof, nbrdep, 0, 0, "Ap"),
        gentran(literal(cr)),

        gentran(literal("        MatX Apd(nbrdof, nbrdep)\;", cr)),
        genmat(opt[5], nbrdof, nbrdep, 0, 0, "Apd"),
        gentran(literal(cr)),

        gentran(literal("        MatX Apdd(nbrdof, nbrdep)\;", cr)),
        genmat(opt[6], nbrdof, nbrdep, 0, 0, "Apdd"),
        gentran(literal(cr)),

        gentran(literal("        MatX dp_dq(nbrdep, nbrdof)\;", cr)),
        genmat(opt[7], nbrdep, nbrdof, 0, 0, "dp_dq"),
        gentran(literal(cr)),

        gentran(literal("        MatX dp_dp(nbrdep, nbrdep)\;", cr)),
        genmat(opt[8], nbrdep, nbrdep, 0, 0, "dp_dp"),
        gentran(literal(cr)),

        gentran(literal("        MatX dpd_dq(nbrdep, nbrdof)\;", cr)),
        genmat(opt[9], nbrdep, nbrdof, 0, 0, "dpd_dq"),
        gentran(literal(cr)),

        gentran(literal("        MatX dpd_dp(nbrdep, nbrdep)\;", cr)),
        genmat(opt[10], nbrdep, nbrdof, 0, 0, "dpd_dp"),
        gentran(literal(cr)),

        gentran(literal("        MatX dpdd_dq(nbrdep, nbrdof)\;", cr)),
        genmat(opt[11], nbrdep, nbrdof, 0, 0, "dpdd_dq"),
        gentran(literal(cr)),

        gentran(literal("        MatX dpdd_dqd(nbrdep, nbrdof)\;", cr)),
        genmat(opt[12], nbrdep, nbrdof, 0, 0, "dpdd_dqd"),
        gentran(literal(cr)),

        gentran(literal("        MatX dpdd_dqdd(nbrdep, nbrdof)\;", cr)),
        genmat(opt[13], nbrdep, nbrdof, 0, 0, "dpdd_dqdd"),
        gentran(literal(cr)),

        gentran(literal("        MatX dpdd_dp(nbrdep, nbrdep)\;", cr)),
        genmat(opt[14], nbrdep, nbrdep, 0, 0, "dpdd_dp"),
        gentran(literal(cr)),

        gentran(literal("        MatX dpdd_dpd(nbrdep, nbrdep)\;", cr)),
        genmat(opt[15], nbrdep, nbrdep, 0, 0, "dpdd_dpd"),
        gentran(literal(cr)),

        gentran(literal("        dp_dq+= dp_dp*dp_dq\;", cr, cr)),

        gentran(literal("        dpd_dq+= dpd_dp*dp_dq\;", cr)),
        gentran(literal("        dpd_dq+= dp_dp*dpd_dq\; // dpd_dpd= dp_dp", cr)),

        gentran(literal("        dpdd_dq+= dpdd_dp*dp_dq\;", cr)),
        gentran(literal("        dpdd_dq+= dpdd_dpd*dpd_dq\;", cr)),
        gentran(literal("        dpdd_dq+= dp_dp*dpdd_dq\;  // dpdd_dpdd= dp_dp", cr)),

        gentran(literal("        dpdd_dqd+= dpdd_dpd*dp_dq\; // dpd_dqd= dp_dq", cr)),
        gentran(literal("        dpdd_dqd+= dp_dp*dpdd_dqd\;", cr)),

        gentran(literal("        dpdd_dqdd+= dp_dp*dpdd_dqdd\;", cr, cr)),

        gentran(literal("        K+= Ap*dp_dq + Apd*dpd_dq + Apdd*dpdd_dq\;", cr, cr)),
        gentran(literal("        C+= Apd*dp_dq + Apdd*dpdd_dqd\;", cr, cr)),
        gentran(literal("        M+= Apdd*dpdd_dqdd\;", cr, cr))
    ),


    for i:1 thru nbrdof do (
        i_: i-1,
        do_assign(concat("f[", i_, "]"), opt[1][i])
    )
)$>>
    }
    
    Jacobian= alphaM*M + alphaC*C + alphaK*K;

    for(int idof= 0; idof < nbrdof; idof++) {
        if(doflocked[idof]) {
            f[idof]= 0.0;
            Jacobian.col(idof).setZero();
            Jacobian.row(idof).setZero();
            Jacobian(idof, idof)= 1.0;
        }
    }
}

void <<gentran(literal(eval(filename)))$>>::calcB() {
    {
<<block([opt], 
    ccurrind: 8,
    
    if const_matrix_once=1 then (    
        B_no_const: matrixmap(lambda([e], if constantp(e) then 0 else e), B)
    ) else (
        B_no_const: B
    ),
    
    opt: genopt([-B_no_const]),
    gentran(literal(cr)),
    
    genmat(opt[1], nbrdof, nbrin, nbrdof, 0, "B", const_matrix_once)
)$>>
    }
}

void <<gentran(literal(eval(filename)))$>>::calcCDF() {
    {
<<block([opt], 
    ccurrind: 8,

    if const_matrix_once=1 then (    
        C_no_const: matrixmap(lambda([e], if constantp(e) then 0 else e), C),
        D_no_const: matrixmap(lambda([e], if constantp(e) then 0 else e), D),
        F_no_const: matrixmap(lambda([e], if constantp(e) then 0 else e), F)
    ) else (
        C_no_const: C,
        D_no_const: D,
        F_no_const: F
    ),        
    
    opt: genopt([y, C_no_const, D_no_const, F_no_const]),
    gentran(literal(cr)),
    
    for i:1 thru length(y) do (
        i_: i-1,
        do_assign(concat("y[", i_, "]"), opt[1][i])
    ),
    
    gentran(literal(cr)),
    genmat(opt[2], length(y), 2*nbrdof, 0, 0, "CD", const_matrix_once),
    gentran(literal(cr)),
    genmat(opt[3], length(y), nbrin, 0, 0, "CD.block(0, 2*nbrdof, nbrout, nbrin)", const_matrix_once),
    gentran(literal(cr)),
    genmat(opt[4], length(y), nbrdof, 0, 0, "F", const_matrix_once)
)$>>
    }
}

void <<gentran(literal(eval(filename)))$>>::calcOut() {
    {
<<block([opt], 
    ccurrind: 8,
    
    opt: genopt([y]),
        
    for i:1 thru length(y) do (
        i_: i-1,
        do_assign(concat("y[", i_, "]"), opt[1][i])
    )
)$>>
    }
}

<<block([], 
    if length(external) > 0 then (
        gentran(literal("#include \"", eval(filename), "_Externals.hpp\""))
    )
)$>>

