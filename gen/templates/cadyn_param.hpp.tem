<<block(
    load(cadyn_gen_util),
    load(cadyn_prepare_direct_variables),
    load(cadyn_prepare_parameters),
    
    cadyn_prepare_direct_variables(sysdef),
    cadyn_prepare_parameters(sysdef)
)$>><<gentran(literal("\/\* File generated form template cadyn_direct_params.hpp.tem on ", eval(timedate()), ". Do not edit! \*\/"))$>>
<<gentran(literal("\/\* Multibody system: ", eval(title), " \*\/"))$>>

#include <string>
#include <map>
#include <fstream>
#include <iostream>
#include <stdlib.h>
#include <cstdio>
#include <Eigen/Dense>
#include <Eigen/Geometry>

#ifdef WITH_CONSTANTS
<<block([i, j],
    gentran(literal("const int n_states= ", eval(nbrdof*2), "\;", cr)),
    gentran(literal("const int n_inputs= ", eval(nbrin), "\;", cr, cr)),

    j: 0,
    for i:1 thru nbrdof do (
        gentran(literal("const int ", eval(states[i]), "= ", eval(j), "\;", cr)),
        j: j+1
    ),            
    for i:1 thru nbrdof do (
        gentran(literal("const int ", eval(states_d[i]), "= ", eval(j), "\;", cr)),
        j: j+1
    ),            
    j: 0,
    for i:1 thru nbrin do (
        gentran(literal("const int ", eval(u[i]), "= ", eval(j), "\;", cr)),
        j: j+1
    )
)$>>
#endif

class ParameterInfo {
public:
    ParameterInfo() :
        isSet(false),
        nrows(0),
        ncols(0),
        offset(0),
        data(nullptr)
        {}
        
    ParameterInfo(real_type *data_, int nrows_, int ncols_, int offset_) :
        isSet(false),
        nrows(nrows_),
        ncols(ncols_),
        offset(offset_),
        data(data_)
        {}

    bool setParam(const real_type *value);
    real_type getParam() const;
    void getParam(real_type *p) const;
    bool isSet;
    int nrows, ncols;
    int offset;
    
private:
    real_type *data;
};

bool ParameterInfo::setParam(const real_type *value) {
    bool wasSet= isSet;
    
    memcpy(data, value, sizeof(real_type)*nrows*ncols);
    isSet= true;
    return wasSet;
}

real_type ParameterInfo::getParam() const {
    return data[0];
}

void ParameterInfo::getParam(real_type *value) const {
    memcpy(value, data, sizeof(real_type)*nrows*ncols);
}

class <<gentran(literal(eval(filename), "Parameters"))$>> {
public:
    <<gentran(literal(eval(filename), "Parameters"))$>>();
    void setParam(const std::string &name, const real_type *value);
    real_type getParam(const std::string &name);
    void getParamArray(real_type *p);
    int getNumParameters();
    void setFromFile(const std::string &fileName);
    bool unsetParamsWithMsg();
    
    std::map<std::string, ParameterInfo> info_map;
    int unsetParams;
    
<<block([i, dims],
    for i:1 thru length(params) do (
        if subvarp(params[i]) then (
            dims: args(params[i]),
            if length(dims)=1 then dims: endcons(1, dims),
            
            gentran(literal("    Eigen::Matrix<real_type, ", eval(dims[1]), ", ", eval(dims[2]), "> ", eval(op(params[i])), "\;", cr))
        ) else
            gentran(literal("    real_type ", eval(params[i]), "\;", cr))
    )
)$>>
};

<<gentran(literal(eval(filename), "Parameters"))$>>::<<gentran(literal(eval(filename), "Parameters"))$>>() :
    info_map(),
    unsetParams(<<gentran(literal(eval(length(params))))$>>) {
    int offset= 0;
<<block([],
    for i:1 thru length(params) do (
        if subvarp(params[i]) then (
            dims: args(params[i]),
            if length(dims)=1 then dims: endcons(1, dims),
            
            gentran(literal("    info_map[\"", eval(op(params[i])), "\"]= ParameterInfo(", eval(op(params[i])), ".data(), ", eval(dims[1]), ", ", eval(dims[2]), ", offset)\; offset+= ", eval(dims[1]), "*", eval(dims[2]), "\;", cr))
        ) else
            gentran(literal("    info_map[\"", eval(params[i]), "\"]= ParameterInfo(&", eval(params[i]), ", 1, 1, offset)\; offset+= 1\;", cr))
    )
)$>>}

void <<gentran(literal(eval(filename), "Parameters"))$>>::setParam(const std::string &name, const real_type *value) {
    auto it = info_map.find(name);
    if(it==info_map.end())    
        throw std::runtime_error("Unknown parameter \"" + name + "\".");
    
    if(!it->second.setParam(value))
        unsetParams--;
}

real_type <<gentran(literal(eval(filename), "Parameters"))$>>::getParam(const std::string &name) {
    auto it = info_map.find(name);
    if(it==info_map.end())    
        throw std::runtime_error("Unknown parameter \"" + name + "\".");
    
    return it->second.getParam();    
}

void <<gentran(literal(eval(filename), "Parameters"))$>>::setFromFile(const std::string &fileName) {
    std::ifstream infile(fileName);
    
    if(infile.is_open()) {
        int i= 0;
        for(std::string line; std::getline(infile, line);) {
            ++i;
            std::istringstream iss(line);
            
            std::string paramName;
            iss <<gentran(literal(">>"))$>> paramName;
            
            if(paramName.empty() || (paramName[0]=='*' || paramName[0]=='#')) // comment or empty line
                continue;
            
            auto it = info_map.find(paramName);
            if(it==info_map.end())    
                throw std::runtime_error("Unknown parameter \"" + paramName + "\".");
            
            Eigen::Matrix<real_type,Eigen::Dynamic,Eigen::Dynamic> value(it->second.nrows, it->second.ncols);
            bool fail= false;
            
            for(int r= 0; r<it->second.nrows; ++r) {
                if(r>0) {
                    if(!std::getline(infile, line)) {
                        fprintf(stderr, "Out of lines while reading parameter \"%s(%d, 1)\".\n", paramName.c_str(), r);                   
                        fail= true;
                        break;
                    }
                    ++i;
                    iss.str(line);
                }                    
                for(int c= 0; c<it->second.ncols; ++c) {
                    iss <<gentran(literal(">>"))$>> value(r, c);
                    if(iss.fail()) {
                        fprintf(stderr, "Could not read value for parameter \"%s(%d, %d)\" in line %d.\n", paramName.c_str(), r, c, i);
                        fail= true;
                        break;
                    }                
                }
                if(fail) break;
            }
            if(fail) continue;
            
            try {
                setParam(paramName, value.data());
            } catch (const std::exception& e) {
                fprintf(stderr, "Error: %s in line %d.\n", e.what(), i);
                continue;
            }
        }            
    } else
        throw std::runtime_error("Could not open file \"" + fileName + "\"");
}   
    
bool <<gentran(literal(eval(filename), "Parameters"))$>>::unsetParamsWithMsg() {
    if(unsetParams) {
        fprintf(stderr, "The following parameters are not set:\n");
        for(auto const &i : info_map) {
            if(!i.second.isSet)
                fprintf(stderr, "%s\n", i.first.c_str());
        }
    }
    
    return unsetParams;
}

void <<gentran(literal(eval(filename), "Parameters"))$>>::getParamArray(real_type *p) {
    for(auto const &i : info_map) {
        if(!i.second.isSet)
            throw std::runtime_error("Parameter \"" + i.first + "\" is not set.");
        
        i.second.getParam(&p[i.second.offset]);
    }    
}

int <<gentran(literal(eval(filename), "Parameters"))$>>::getNumParameters() {
    int num= 0;
    for(auto const &i : info_map) {
        num+= i.second.nrows * i.second.ncols;
    }
    return num;
}
