#include "ODEOrder2.hpp"
#include <string>
#include <map>
#include <fstream>
#include <iostream>
#include <stdlib.h>
#include <chrono>
#include <cstdio>
#include <ctime>

<<gentran(literal("\/\* File generated form template cadyn2_cpp.tem on ", eval(timedate()), ". Do not edit! \*\/", cr))>>
<<gentran(literal("\/\* Multibody system: ", eval(title), " \*\/", cr, cr))>>

#define mcond(c, a, x, b) ((c)? a:b)

class ParameterInfo {
public:
    ParameterInfo() :
        isSet(false),
        nrows(0),
        ncols(0),
        data(nullptr)
        {}
        
    ParameterInfo(double *data_, int nrows_, int ncols_) :
        isSet(false),
        nrows(nrows_),
        ncols(ncols_),
        data(data_)
        {}

    bool setParam(const double *value);
    double getParam();
    bool isSet;
    int nrows, ncols;
    
private:
    double *data;
};

bool ParameterInfo::setParam(const double *value) {
    bool wasSet= isSet;
    
    memcpy(data, value, sizeof(double)*nrows*ncols);
    isSet= true;
    return wasSet;
}

double ParameterInfo::getParam() {
    return data[0];
}

class <<gentran(literal(eval(filename), "Parameters"))>> {
public:
    <<gentran(literal(eval(filename), "Parameters"))>>();
    void setParam(const std::string &name, const double *value);
    double getParam(const std::string &name);
    void setFromFile(const std::string &fileName);
    bool unsetParamsWithMsg();
    
    std::map<std::string, ParameterInfo> info_map;
    int unsetParams;
    
<<block([i, dims],
    for i:1 thru length(params) do (
        if subvarp(params[i]) then (
            dims: args(params[i]),
            if length(dims)=1 then dims: endcons(1, dims),
            
            gentran(literal("    Eigen::Matrix<double, ", eval(dims[1]), ", ", eval(dims[2]), "> ", eval(op(params[i])), "\;", cr))
        ) else
            gentran(literal("    double ", eval(params[i]), "\;", cr))
    )
)>>
};

<<gentran(literal(eval(filename), "Parameters"))>>::<<gentran(literal(eval(filename), "Parameters"))>>() :
    info_map(),
    unsetParams(<<gentran(literal(eval(length(params))))>>) {
<<block([],
    for i:1 thru length(params) do (
        if subvarp(params[i]) then (
            dims: args(params[i]),
            if length(dims)=1 then dims: endcons(1, dims),
            
            gentran(literal("    info_map[\"", eval(op(params[i])), "\"]= ParameterInfo(", eval(op(params[i])), ".data(), ", eval(dims[1]), ", ", eval(dims[2]), ")\;", cr))
        ) else
            gentran(literal("    info_map[\"", eval(params[i]), "\"]= ParameterInfo(&", eval(params[i]), ", 1, 1)\;", cr))
    )
)>>}

void <<gentran(literal(eval(filename), "Parameters"))>>::setParam(const std::string &name, const double *value) {
    auto it = info_map.find(name);
    if(it==info_map.end())    
        throw std::runtime_error("Unknown parameter \"" + name + "\".");
    
    if(!it->second.setParam(value))
        unsetParams--;
}

double <<gentran(literal(eval(filename), "Parameters"))>>::getParam(const std::string &name) {
    auto it = info_map.find(name);
    if(it==info_map.end())    
        throw std::runtime_error("Unknown parameter \"" + name + "\".");
    
    return it->second.getParam();    
}

void <<gentran(literal(eval(filename), "Parameters"))>>::setFromFile(const std::string &fileName) {
    std::ifstream infile(fileName);
    
    if(infile.is_open()) {
        int i= 0;
        for(std::string line; std::getline(infile, line);) {
            ++i;
            std::istringstream iss(line);
            
            std::string paramName;
            iss >> paramName;
            
            if(paramName.empty() || (paramName[0]=='*' || paramName[0]=='#')) // comment or empty line
                continue;
            
            auto it = info_map.find(paramName);
            if(it==info_map.end())    
                throw std::runtime_error("Unknown parameter \"" + paramName + "\".");
            
            Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> value(it->second.nrows, it->second.ncols);
            bool fail= false;
            
            for(int r= 0; r<it->second.nrows; ++r) {
                if(r>0) {
                    if(!std::getline(infile, line)) {
                        fprintf(stderr, "Out of lines while reading parameter \"%s(%d, 1)\".\n", paramName.c_str(), r);                   
                        fail= true;
                        break;
                    }
                    ++i;
                    iss.str(line);
                }                    
                for(int c= 0; c<it->second.ncols; ++c) {
                    iss >> value(r, c);
                    if(iss.fail()) {
                        fprintf(stderr, "Could not read value for parameter \"%s(%d, %d)\" in line %d.\n", paramName.c_str(), r, c, i);
                        fail= true;
                        break;
                    }                
                }
                if(fail) break;
            }
            if(fail) continue;
            
            try {
                setParam(paramName, value.data());
            } catch (const std::exception& e) {
                fprintf(stderr, "Error: %s in line %d.\n", e.what(), i);
                continue;
            }
        }            
    } else
        throw std::runtime_error("Could not open file \"" + fileName + "\"");
}   
    
bool <<gentran(literal(eval(filename), "Parameters"))>>::unsetParamsWithMsg() {
    if(unsetParams) {
        fprintf(stderr, "The following parameters are not set:\n");
        for(auto const &i : info_map) {
            if(!i.second.isSet)
                fprintf(stderr, "%s\n", i.first.c_str());
        }
    }
    
    return unsetParams;
}

            
class <<gentran(literal(eval(filename), "System"))>>: public ODEOrder2 {
public:
    static const int nStates= <<gentran(literal(eval(nbrdof)))>>;
    static const int nInputs= <<gentran(literal(eval(nbrin)))>>;
    static const int nbrdep= <<gentran(literal(eval(nbrdep)))>>;
    
    <<gentran(literal(eval(filename), "System"))>>(); 
        
    virtual VecX computeResiduals();
    virtual void calcJacobian(double alphaM, double alphaC, double alphaK);
    virtual void calcB();
<<block([], 
    if length(external) > 0 then (
        gentran(literal("    void calculateExternal()\;", cr)),
        gentran(literal("    void calculateExternalWithDeriv()\;", cr))
    )
)>>
    
    <<gentran(literal(eval(filename), "Parameters"))>> param;
    
// private:
    VecX p, pd, pdd;
    
<<block([i], 
    for i:1 thru length(external) do
        gentran(literal("    double ", eval(external[i]), "\;", cr)),
        
    for i:1 thru length(d_external) do
        gentran(literal("    double ", eval(d_external[i]), "\;", cr))
)>>
};

const int <<gentran(literal(eval(filename)))>>System::nbrdep;

<<gentran(literal(eval(filename), "System"))>>::<<gentran(literal(eval(filename), "System"))>>() : 
    ODEOrder2(nStates, nInputs, "<<gentran(literal(eval(filename)))>>", "<<gentran(literal(eval(title)))>>"),
    param(),
    p(nbrdep),
    pd(nbrdep),
    pdd(nbrdep)
{
<<block([i, i_, opt], 
        ?ccurrind\*: 4,
        save_subst_list: subst_list,
        subst_list: [],
        
        for i:1 thru nbrin do (
            i_: i-1,
            do_assign(concat("in_name[", i_, "]"), concat("\"", u[i], "\""))
        ),
        subst_list: save_subst_list
)>>
}

VecX <<gentran(literal(eval(filename)))>>System::computeResiduals() {
    VecX f_(nbrdof);
    
<<block([], 
    if length(external) > 0 then (
        gentran(literal("    calculateExternal()\;", cr, cr))
    )
)>>
    // TODO write non-constant values only once
<<block([i, i_, opt], 
    ?ccurrind\*: 8,

    if nbrdep > 0 then (
        gentran(literal("    // Dependant variables", cr)),
        gentran("    {", literal(cr)),
                    
        opt: genopt([pi, pdi, pddi]),
        gentran(literal(cr)),

        for i:1 thru nbrdep do (
            i_: i-1,
            do_assign('p[i_], opt[1][i]),
            do_assign('pd[i_], opt[2][i]),
            do_assign('pdd[i_], opt[3][i]),
            gentran(literal(cr))
        ),
        gentran("    }", literal(cr))        
    )
)>>

    {
<<block([i, i_, opt], 
    ?ccurrind\*: 8,

    opt: genopt([f]),
    gentran(literal(cr)),

    for i:1 thru nbrdof do (
        i_: i-1,
        do_assign(concat("f_[", i_, "]"), opt[1][i])
    )
)>>
    }

    return f_;
}

void <<gentran(literal(eval(filename)))>>System::calcJacobian(double alphaM, double alphaC, double alphaK) {
<<block([], 
    if length(external) > 0 then (
        gentran(literal("    calculateExternalWithDeriv()\;", cr, cr))
    )
)>>
    // TODO write non-constant values only once
<<block([i, i_, opt], 
    ?ccurrind\*: 8,

    if nbrdep > 0 then (
        gentran(literal("    // Dependant variables", cr)),
        gentran("    {", literal(cr)),
                    
        opt: genopt([pi, pdi, pddi]),
        gentran(literal(cr)),

        for i:1 thru nbrdep do (
            i_: i-1,
            do_assign('p[i_], opt[1][i]),
            do_assign('pd[i_], opt[2][i]),
            do_assign('pdd[i_], opt[3][i]),
            gentran(literal(cr))
        ),
        gentran("    }", literal(cr))        
    )
)>>

    {
<<block([i, i_, j, j_, opt], 
    ?ccurrind\*: 8,
    
    opt: genopt([f, E, -A, flatten(args(Ap)), flatten(args(Apd)), flatten(args(Apdd)), flatten(args(dp_dq)), flatten(args(dp_dp)), flatten(args(dpd_dq)), flatten(args(dpd_dp)), flatten(args(dpdd_dq)), flatten(args(dpdd_dqd)), flatten(args(dpdd_dqdd)), flatten(args(dpdd_dp)), flatten(args(dpdd_dpd))]),
    gentran(literal(cr)),

    genmat(opt[2], nbrdof, nbrdof, nbrdof, nbrdof, "M"),
    gentran(literal(cr)),
    genmat(opt[3], nbrdof, nbrdof, nbrdof, nbrdof, "C"),
    gentran(literal(cr)),
    genmat(opt[3], nbrdof, nbrdof, nbrdof, 0, "K"),
    gentran(literal(cr)),

    if nbrdep > 0 then (
        gentran(literal("        // TODO make these fix size matrices", cr)),

        gentran(literal("        MatX Ap(nbrdof, nbrdep)\;", cr)),
        genmat(opt[4], nbrdof, nbrdep, 0, 0, "Ap"),
        gentran(literal(cr)),

        gentran(literal("        MatX Apd(nbrdof, nbrdep)\;", cr)),
        genmat(opt[5], nbrdof, nbrdep, 0, 0, "Apd"),
        gentran(literal(cr)),

        gentran(literal("        MatX Apdd(nbrdof, nbrdep)\;", cr)),
        genmat(opt[6], nbrdof, nbrdep, 0, 0, "Apdd"),
        gentran(literal(cr)),

        gentran(literal("        MatX dp_dq(nbrdep, nbrdof)\;", cr)),
        genmat(opt[7], nbrdep, nbrdof, 0, 0, "dp_dq"),
        gentran(literal(cr)),

        gentran(literal("        MatX dp_dp(nbrdep, nbrdep)\;", cr)),
        genmat(opt[8], nbrdep, nbrdep, 0, 0, "dp_dp"),
        gentran(literal(cr)),

        gentran(literal("        MatX dpd_dq(nbrdep, nbrdof)\;", cr)),
        genmat(opt[9], nbrdep, nbrdof, 0, 0, "dpd_dq"),
        gentran(literal(cr)),

        gentran(literal("        MatX dpd_dp(nbrdep, nbrdep)\;", cr)),
        genmat(opt[10], nbrdep, nbrdof, 0, 0, "dpd_dp"),
        gentran(literal(cr)),

        gentran(literal("        MatX dpdd_dq(nbrdep, nbrdof)\;", cr)),
        genmat(opt[11], nbrdep, nbrdof, 0, 0, "dpdd_dq"),
        gentran(literal(cr)),

        gentran(literal("        MatX dpdd_dqd(nbrdep, nbrdof)\;", cr)),
        genmat(opt[12], nbrdep, nbrdof, 0, 0, "dpdd_dqd"),
        gentran(literal(cr)),

        gentran(literal("        MatX dpdd_dqdd(nbrdep, nbrdof)\;", cr)),
        genmat(opt[13], nbrdep, nbrdof, 0, 0, "dpdd_dqdd"),
        gentran(literal(cr)),

        gentran(literal("        MatX dpdd_dp(nbrdep, nbrdep)\;", cr)),
        genmat(opt[14], nbrdep, nbrdep, 0, 0, "dpdd_dp"),
        gentran(literal(cr)),

        gentran(literal("        MatX dpdd_dpd(nbrdep, nbrdep)\;", cr)),
        genmat(opt[15], nbrdep, nbrdep, 0, 0, "dpdd_dpd"),
        gentran(literal(cr)),

        gentran(literal("        dp_dq+= dp_dp*dp_dq\;", cr, cr)),

        gentran(literal("        dpd_dq+= dpd_dp*dp_dq\;", cr)),
        gentran(literal("        dpd_dq+= dp_dp*dpd_dq\; // dpd_dpd= dp_dp", cr)),

        gentran(literal("        dpdd_dq+= dpdd_dp*dp_dq\;", cr)),
        gentran(literal("        dpdd_dq+= dpdd_dpd*dpd_dq\;", cr)),
        gentran(literal("        dpdd_dq+= dp_dp*dpdd_dq\;  // dpdd_dpdd= dp_dp", cr)),

        gentran(literal("        dpdd_dqd+= dpdd_dpd*dp_dq\; // dpd_dqd= dp_dq", cr)),
        gentran(literal("        dpdd_dqd+= dp_dp*dpdd_dqd\;", cr)),

        gentran(literal("        dpdd_dqdd+= dp_dp*dpdd_dqdd\;", cr, cr)),

        gentran(literal("        K+= Ap*dp_dq + Apd*dpd_dq + Apdd*dpdd_dq\;", cr, cr)),
        gentran(literal("        C+= Apd*dp_dq + Apdd*dpdd_dqd\;", cr, cr)),
        gentran(literal("        M+= Apdd*dpdd_dqdd\;", cr, cr))
    ),


    for i:1 thru nbrdof do (
        i_: i-1,
        do_assign(concat("f[", i_, "]"), opt[1][i])
    )
)>>
    }
    
    Jacobian= alphaM*M + alphaC*C + alphaK*K;

    for(int idof= 0; idof < nbrdof; idof++) {
        if(doflocked[idof]) {
            f[idof]= 0.0;
            Jacobian.col(idof).setZero();
        }
    }
}

void <<gentran(literal(eval(filename)))>>System::calcB() {
<<block([opt], 
    ?ccurrind\*: 4,
    
    opt: genopt([-B]),
    gentran(literal(cr)),
    
    genmat(opt[1], nbrdof, nbrin, nbrdof, 0, "B")    
)>>
}

<<block([], 
    if length(external) > 0 then (
        gentran(literal("#include \"", eval(filename), "System_Externals.hpp\""))
    )
)>>

