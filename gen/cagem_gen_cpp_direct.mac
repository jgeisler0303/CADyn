
do_assign(n_work, e_work):= block([],
    gentran(lrsetq(eval(n_work), scanmap('float, subst(subst_list, e_work))))
);

genmat(M, n, m, on, om, name, [varargs]):= block([i, j, i_, j_],
    with_only_consts: 0,
    if length(varargs)>0 then
        with_only_consts: varargs[1],
    
    for i:1 thru n do (
        i_: i-1,
        for j:1 thru m do (
            j_: j-1,
            if listp(M) then
                M_element: M[(on+i-1)*m + om+j]
            else
                M_element: M[on+i, om+j],
                
            if with_only_consts=0 or (not(constantp(M_element)) and with_only_consts=1) or (constantp(M_element) and with_only_consts=2) then
                do_assign(concat(name, "(", i_, ", ", j_, ")"), M_element)
        )
    )    
);

make_c_index(v, nbrdof, nbrdep):= block([v_, j, j_],
    v_: v,

    for j:1 thru nbrdof do (
        j_: j-1,
        
        v_: subst(qdd[j_], qdd[j], v_),
        v_: subst(qd[j_], qd[j], v_),
        v_: subst(q[j_], q[j], v_)
    ),
    
    for j:1 thru nbrdep do (
        j_: j-1,
        
        v_: subst(pdd[j_], pdd[j], v_),
        v_: subst(pd[j_], pd[j], v_),
        v_: subst(p[j_], p[j], v_)
    ),
    
    v_
);

genopt(l):= block([o, temps, replace_list, i],
    o: optimize(l),

    if op(o)#'block then
        return(o),
        
    temps: inpart(o, 1),

    pre_replace_list: makelist(temps[i]=concat(temp, i), i, 1, length(temps)),
    replace_list: [],
    
    for i: 1 thru length(temps) do (
        if not(listp(inpart(o, i+1, 2)) or matrixp(inpart(o, i+1, 2))) then (
            gentran(literal("        real_type ")),
            do_assign(concat(temp, i), subst(pre_replace_list, inpart(o, i+1, 2))),
            replace_list: endcons(pre_replace_list[i], replace_list)
        ) else (
            replace_list: endcons(inpart(o, i+1, 1)=inpart(o, i+1, 2), replace_list)
        )
    ),

    subst(replace_list, subst(replace_list, inpart(o, length(temps)+2)))
);


cagem_gen_cpp_direct(sysdef, [varargs]):= block([i, j, i_, j_, file, title, nbrdof, nbrbody, nbrin, nbrdep, external, d_external, params, E, A, Ap, Apd, Apdd, f, pi, pdi, pddi, dp_dq, dp_dp, dpd_dq, dpd_dqd, dpd_dp, dpd_dpd, dpdd_dq, dpdd_dqd, dpdd_dqdd, dpdd_dp, dpdd_dpd, dpdd_dpdd, qi, qdi, FinalTime, StepSave, StepMax],
    file: sysdef@sys_rel@file,
    title: sysdef@sys_rel@name,
    nbrdof: sysdef@sys_rel@nbrdof,
    nbrbody: sysdef@sys_rel@nbrbody,
    nbrdep: sysdef@sys_rel@nbrdep,
    nbrin: sysdef@sys_rel@nbrin,
    u: sysdef@sys_rel@u,
    output_names: sysdef@sys_rel@out_names,
    default_states: sysdef@sys_rel@default_states,
    states: sysdef@sys_rel@states,
    states_d: sysdef@sys_rel@states_d,
    states_dd: sysdef@sys_rel@states_dd,
    y: make_c_index(sysdef@outputs, nbrdof, nbrdep),
    external: sysdef@sys_rel@external,
    d_external: sysdef@sys_rel@d_external,
    params: append(sysdef@params, sysdef@sys_rel@ext_param),
    qi: sysdef@sys_abs@qi,
    qdi: sysdef@sys_abs@qdi,
    FinalTime: sysdef@sys_abs@FinalTime,
    StepSave: sysdef@sys_abs@StepSave,
    StepMax: sysdef@sys_abs@StepMax,
    
    E: make_c_index(sysdef@f_lin@E, nbrdof, nbrdep),
    A: make_c_index(sysdef@f_lin@A, nbrdof, nbrdep),
    B: make_c_index(sysdef@f_lin@B, nbrdof, nbrdep),
    C: make_c_index(sysdef@f_lin@C, nbrdof, nbrdep),
    D: make_c_index(sysdef@f_lin@D, nbrdof, nbrdep),
    F: make_c_index(sysdef@f_lin@F, nbrdof, nbrdep),
    Ap: make_c_index(sysdef@f_lin@Ap, nbrdof, nbrdep),
    Apd: make_c_index(sysdef@f_lin@Apd, nbrdof, nbrdep),
    Apdd: make_c_index(sysdef@f_lin@Apdd, nbrdof, nbrdep),
    dp_dq: make_c_index(sysdef@f_lin@dp_dq, nbrdof, nbrdep),
    dp_dp: make_c_index(sysdef@f_lin@dp_dp, nbrdof, nbrdep),
    dpd_dq: make_c_index(sysdef@f_lin@dpd_dq, nbrdof, nbrdep),
    dpd_dqd: make_c_index(sysdef@f_lin@dpd_dqd, nbrdof, nbrdep),
    dpd_dp: make_c_index(sysdef@f_lin@dpd_dp, nbrdof, nbrdep),
    dpd_dpd: make_c_index(sysdef@f_lin@dpd_dpd, nbrdof, nbrdep),
    dpdd_dq: make_c_index(sysdef@f_lin@dpdd_dq, nbrdof, nbrdep),
    dpdd_dqd: make_c_index(sysdef@f_lin@dpdd_dqd, nbrdof, nbrdep),
    dpdd_dqdd: make_c_index(sysdef@f_lin@dpdd_dqdd, nbrdof, nbrdep),
    dpdd_dp: make_c_index(sysdef@f_lin@dpdd_dp, nbrdof, nbrdep),
    dpdd_dpd: make_c_index(sysdef@f_lin@dpdd_dpd, nbrdof, nbrdep),
    dpdd_dpdd: make_c_index(sysdef@f_lin@dpdd_dpdd, nbrdof, nbrdep),

    f: make_c_index(sysdef@f, nbrdof, nbrdep),
    pi: make_c_index(sysdef@sys_abs@pi, nbrdof, nbrdep),
    pdi: make_c_index(sysdef@sys_abs@pdi, nbrdof, nbrdep),
    pddi: make_c_index(sysdef@sys_abs@pddi, nbrdof, nbrdep),
    
    pre_calc_const: sysdef@const_eqns,
    const_matrix_once: 0,
    if length(varargs)>1 then
        if varargs[2]=1 then
            const_matrix_once: 1,
    
    subst_list: [],
    if default_states=0 then (
        for i:1 thru nbrdof do (
            subst_list: endcons(sysdef@sys_rel@states[i]='q[i-1], subst_list),
            subst_list: endcons(sysdef@sys_rel@states_d[i]='qd[i-1], subst_list),
            subst_list: endcons(sysdef@sys_rel@states_dd[i]='qdd[i-1], subst_list)
        )
    ),
    for i:1 thru nbrin do
        subst_list: endcons(sysdef@sys_rel@u[i]='u[i-1], subst_list),
    for i:1 thru nbrin do
        subst_list: endcons(sysdef@sys_rel@u[i]='u[i-1], subst_list),
    for i:1 thru length(sysdef@params) do
        subst_list: endcons(sysdef@params[i]=concat('param\., sysdef@params[i]), subst_list),

    filepath: pathname_directory(file),
    if length(varargs)>0 then (
        filepath: varargs[1],
        if slength(filepath)>0 then
            if notequal(substring (filepath, slength(filepath), slength(filepath)+1),"/") then
                filepath: sconcat(filepath, "/")
    ),
    filename: pathname_name(file),
    
    load("gentran"),
    load(operatingsystem),

    gentranlang: 'c,
    genfloat: true,
    gentranseg: false,
    clinelen: 1000,
    
    out_name: sconcat(filepath, filename, "_direct.hpp"),
    if file_search(out_name)#false then delete_file(out_name),
    templ_name: ssubst("cadyn_direct.cpp.tem", "cagem.mac", cagem_dir),
    gentranin(templ_name, [out_name]),
                                      
    out_name: sconcat(filepath, filename, "_param.hpp"),
    if file_search(out_name)#false then delete_file(out_name),
    templ_name: ssubst("cadyn_direct_params.hpp.tem", "cagem.mac", cagem_dir),
    gentranin(templ_name, [out_name]),

    ext_file: sconcat(filepath, filename, "_Externals.hpp"),
    if file_search(ext_file)=false then (
        ext_file_source: sconcat(pathname_directory(file), filename, "_Externals.hpp"),
        
        if not(file_search(ext_file_source)=false) then (
            copy_file(ext_file_source, ext_file)
        ) else (
            templ_name: ssubst("cadyn_direct_external.hpp.tem", "cagem.mac", cagem_dir),
            gentranin(templ_name, [ext_file])
        )
    ),

    out_name: concat(filepath, "model_parameters.m"),
    if file_search(out_name)#false then delete_file(out_name),
    templ_name: ssubst("model_parameters.m.tem", "cagem.mac", cagem_dir),
    gentranin(templ_name, [out_name])
    
    /* app_file: sconcat(filepath, filename, "_app2.cpp"), */
    /* if file_search(app_file)=false then */

    /* gentranin(filename_merge(cagem_dir, "cadyn2_cpp_app.tem"), [openw(app_file)]) */
);


