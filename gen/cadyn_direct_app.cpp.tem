#include "IntegratorGNUPlotVisitor.hpp"
#include "IntegratorCompareVisitor.hpp"
#include <iostream>
#include <stdlib.h>
#include <chrono>
#include <cstdio>
#include <ctime>

<<gentran(literal("#include \"", eval(filename), "System2.hpp\""))$>>

// g++ -std=c++0x -I. -I ../../src <<gentran(literal(eval(filename)))$>>_app.cpp -L../../Debug -lCADyn -o <<gentran(literal(eval(filename)))$>>_app

int main(int argc, char* argv[]) {
    <<gentran(literal(eval(filename)))$>>System system;

<<block([j], 
    ccurrind: 4,
    for j:1 thru nbrdof do (
        do_assign(concat("system.q(", j-1, ")"), qi[j]),
        do_assign(concat("system.qd(", j-1, ")"), qdi[j])
))$>>

<<block([], 
    if length(params)>0 then
        gentran(literal("    const bool with_parameters= true\;", cr))
    else
        gentran(literal("    const bool with_parameters= false\;", cr))
)$>>
    int arg_offset= 0;
    
    if(with_parameters) {
        std::string param_file;
        param_file= argv[0];
        param_file+= "_param.dat";
        try {
            system.param.setFromFile(param_file);
        } catch (const std::exception& e) {
            fprintf(stderr, "Parameter file error: %s\n", e.what());
            exit (EXIT_FAILURE);
        }
        if(system.param.unsetParamsWithMsg()) {
            fprintf(stderr, "\nAll parameters have to be set. Exiting.\n");
            exit (EXIT_FAILURE);            
        }
        // arg_offset= 1;
    }
    
    {
        AbstractIntegratorVisitor *visitor;
        bool is_compare_visitor= false;
        if(argc==2+arg_offset) {
            is_compare_visitor= true;
            visitor= new IntegratorCompareVisitor(string(argv[1+arg_offset]));
        } else
            visitor= new IntegratorGNUPlotVisitor();
        
        std::clock_t startcputime = std::clock();
<<gentran(literal("        bool res= system.newmarkIntegration(", eval(float(FinalTime)), ", ", eval(float(StepSave)), ", ", eval(float(StepMax)), ", visitor)\;", cr))$>>
        double cpu_duration = (std::clock() - startcputime) / (double)CLOCKS_PER_SEC;

        if(!res) {
            std::cerr <<gentran(literal("<<"))$>> "Error in integrator" <<gentran(literal("<<"))$>> std::endl;
            exit (EXIT_FAILURE);
        }
        std::cout <<gentran(literal("<<"))$>> "Run-time of integrator: " <<gentran(literal("<<"))$>> cpu_duration <<gentran(literal("<<"))$>> " seconds" <<gentran(literal("<<"))$>> std::endl;
        
        if(is_compare_visitor)
            static_cast<IntegratorCompareVisitor*>(visitor)->printResult();
    }
    exit (EXIT_SUCCESS);
}
