cagem(file, [varargs]):= block([output, i, appliedF, appliedM, appliedFe, T0G, accelerations],
    output: new(cagem_out),

    output@sys_rel: prepareInput(file),
    output@sys_rel: prepareKinematics(output@sys_rel),
    output@sys_abs: composeMotion(output@sys_rel),
    print("Done with composeMotion"),
    output@forces: computeForceBalance(output@sys_abs),
    print("Done with computeForceBalance"),
    
    appliedForcesZero(output@sys_abs),
    for i:1 thru output@sys_abs@nbrbody do T0G[i]: output@sys_abs@T0G[i],
    appliedForces(),
    
    for i: 1 thru output@sys_rel@nbrbody do (
        output@forces@R[i]: output@forces@R[i] + appliedF[i],
        output@forces@MG[i]: output@forces@MG[i] + appliedM[i],
        output@forces@Re[i]: output@forces@Re[i] + appliedFe[i]        
    ),
    
    output@f: generalizedBalance(output@sys_abs, output@forces),
    print("Done with generalizedBalance"),
    output@constraints: constraintForces(output@sys_abs, output@forces, [z]),
    print("Done with constraintForces"),
    output@f: subst([eps=1, eps_rot=1], fullratsubst([eps^2=0, eps_rot^3=0], output@f)),
    
    output@f: append(output@f, output@sys_rel@f_ext),
    output@sys_rel@nbrdof: length(output@f),
    output@sys_abs@nbrdof: length(output@f),
    
    if output@sys_abs@SIMPLIFY=1 then (
        output@f: simplify(output@f),
        output@constraints: simplify(output@constraints)
    ),
    
    listconstvars: true,
    output@params: listify(subset(setify(listofvars(output@f)), lambda([x], not(member(x, output@sys_rel@states) or member(x, output@sys_rel@states_d) or member(x, output@sys_rel@states_dd) or member(x, output@sys_rel@u) or member(x, output@sys_rel@external) or member(x, output@sys_rel@d_external) or x=t)))),
    
    
    apply(declare, [output@params, constant]),
    
    if length(varargs)>0 then (
        if varargs[1]=1 then (
            const_eqns: [],
                
            load (rducon),
            
            const_prefix: pre_calc_cost,
            const_counter: 1,
            
            if length(output@f)>0 then
                output@f: reduce_consts(output@f),
                
            if length(output@constraints)>0 then
                output@constraints: reduce_consts(output@constraints)
        )   
    ),
    
    if output@sys_rel@WITH_LINEAR=1 then
        output@f_lin: linearize(output@f, output@sys_rel)
    else (
        output@f_lin: new(lin_model),
        output@f_lin@M: [],
        output@f_lin@E: [],
        output@f_lin@A: [],
        output@f_lin@B: [],
        output@f_lin@Ap: [],
        output@f_lin@Apd: [],
        output@f_lin@Apdd: [],
        output@f_lin@dp_dq: [],
        output@f_lin@dp_dp: [],
        output@f_lin@dpd_dq: [],
        output@f_lin@dpd_dqd: [],
        output@f_lin@dpd_dp: [],
        output@f_lin@dpd_dpd: [],
        output@f_lin@dpdd_dq: [],
        output@f_lin@dpdd_dqd: [],
        output@f_lin@dpdd_dqdd: [],
        output@f_lin@dpdd_dp: [],
        output@f_lin@dpdd_dpd: [],
        output@f_lin@dpdd_dpdd: []
    ),
    
        
    if output@sys_rel@WITH_ACCELERATIONS=1 then (
        output@accelerations: calcAccelerations(output@sys_rel@states_dd, output@f, output@f_lin@M),
        if output@sys_abs@SIMPLIFY=1 then
            output@accelerations: simplify(output@accelerations),
        accelerations: output@accelerations
    ) else (
        output@accelerations: []
    ),
    
    if member('modelOutputs, map(op, functions)) then
        output@outputs: modelOutputs()
    else
        output@outputs: [],
    
    output@const_eqns: [],
    if length(varargs)>0 then (
        if varargs[1]=1 then (
            if length(output@outputs)>0 then
                output@outputs: reduce_consts(output@outputs),
                
            if length(output@accelerations)>0 then
                output@accelerations: reduce_consts(output@accelerations),
            
            output@const_eqns: const_eqns
        )
    ),
    
    if output@sys_rel@WITH_LINEAR=1 then
        output: linearizeOut(output)
    else (
        output@f_lin: new(lin_model),
        output@f_lin@C: [],
        output@f_lin@D: [],
        output@f_lin@F: []
    ),
    
    output
);

