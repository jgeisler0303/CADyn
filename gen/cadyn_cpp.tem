#include "MBSystem.hpp"
#include "Body.hpp"
#include "ElasticBody.hpp"

<<gentran(literal("\/\* File generated form template cadyn_cpp.tem on ", eval(timedate()), ". Do not edit! \*\/", cr))>>
<<gentran(literal("\/\* Multibody system: ", eval(title), " \*\/", cr, cr))>>

class <<gentran(literal(eval(filename), "System"))>>: public MBSystem {
public:
    static const int nStates= <<gentran(literal(eval(nbrdof)))>>;
    static const int nInputs= <<gentran(literal(eval(nbrin)))>>;
    
    <<gentran(literal(eval(filename), "System"))>>(); 
    virtual void computeMotion();
    virtual void computeAppliedEfforts();
};

<<gentran(literal(eval(filename), "System::",eval(filename), "System"))>>(): 
    MBSystem(<<gentran(literal(eval(nbrbody)))>>, nStates, <<gentran(literal(eval(nbrdep)))>>, nInputs, "<<gentran(literal(eval(filename)))>>", "<<gentran(literal(eval(title)))>>") {
        
<<block(
    ?ccurrind\*: 4,
    gentran(literal("    g << ", eval(float(gravity[1])), ", ", eval(float(gravity[2])), ", ", eval(float(gravity[3])), "\;", cr))
    )>>
    
<<block([i, i_, j, k], 
    ?ccurrind\*: 4,
    for i:1 thru nbrbody do (
        if length(elastic_dof_idx[i])>0 then (
            body_name: concat("ebody", i),
            gentran(literal("    ElasticBody &", eval(body_name), "= *(new ElasticBody(", eval(nbrdof), ", ", eval(length(elastic_dof_idx[i])),"))\;", cr))
        ) else (
            body_name: concat("body", i),
            gentran(literal("    Body &", eval(body_name), "= *(new Body(", eval(nbrdof), "))\;", cr))
        ),
        i_: i-1,
        do_assign(concat(body_name, ".", 'mass), mass[i]),
        do_assign(concat(body_name, ".", "PhiG(0, 0)"), IG[i][1,1]),
        do_assign(concat(body_name, ".", "PhiG(1, 1)"), IG[i][2,2]),
        do_assign(concat(body_name, ".", "PhiG(2, 2)"), IG[i][3,3]),
        do_assign(concat(body_name, ".", "PhiG(0, 1)"), IG[i][1,2]),
        do_assign(concat(body_name, ".", "PhiG(1, 0)"), IG[i][1,2]),
        do_assign(concat(body_name, ".", "PhiG(0, 2)"), IG[i][1,3]),
        do_assign(concat(body_name, ".", "PhiG(2, 0)"), IG[i][1,3]),
        do_assign(concat(body_name, ".", "PhiG(1, 2)"), IG[i][2,3]),
        do_assign(concat(body_name, ".", "PhiG(2, 1)"), IG[i][2,3]),
        gentran(literal(cr)),
        
        if index_relative[i]=1 then (
            gentran(literal("    ", eval(body_name), ".rel_base= body[", eval(BodyRef[i]-1), "]\;", cr)),
            gentran(literal(cr))
        ),
        
        if length(elastic_dof_idx[i])>0 then (
            gentran(literal("    int edof_idx", eval(i), "[]= {")),
            for j:1 thru length(elastic_dof_idx[i]) do (
                gentran(literal(eval(elastic_dof_idx[i][j]-1))),
                if j#length(elastic_dof_idx[i]) then gentran(literal(", "))
            ),
            gentran(literal("}\;", cr)),
            gentran(literal("    ", eval(body_name), ".edof.assign(edof_idx", eval(i), ", edof_idx", eval(i), "+", eval(length(elastic_dof_idx[i])), ")\;", cr)),
            gentran(literal("    ", eval(body_name), ".md << ", eval(ebody[i]@md[1]), ", ", eval(ebody[i]@md[2]), ", ", eval(ebody[i]@md[3]), "\;", cr)),
            for j:1 thru length(elastic_dof_idx[i]) do (
                gentran(literal("    ", eval(body_name), ".Ct[", eval(j-1), "] << ", eval(ebody[i]@Ct[j][1]), ", ", eval(ebody[i]@Ct[j][2]), ", ", eval(ebody[i]@Ct[j][3]), "\;", cr))
            ),
            for j:1 thru length(elastic_dof_idx[i]) do (
                gentran(literal("    ", eval(body_name), ".Cr[", eval(j-1), "] << ", eval(ebody[i]@Cr[j][1]), ", ", eval(ebody[i]@Cr[j][2]), ", ", eval(ebody[i]@Cr[j][3]), "\;", cr))
            ),
            for j:1 thru length(elastic_dof_idx[i]) do (
                for k:1 thru length(elastic_dof_idx[i]) do (
                    gentran(literal("    ", eval(body_name), ".Me(", eval((j-1)), ", ", eval(k-1), ")= ", eval(ebody[i]@Me[j][k]), "\; "))
                ),
                gentran(literal(cr))
            ),
            for j:1 thru length(elastic_dof_idx[i]) do (
                gentran(literal("    ", eval(body_name), ".Gr[", eval(j-1), "] << ", eval(ebody[i]@Gr[j][1, 1]), ", ", eval(ebody[i]@Gr[j][1, 2]), ", ", eval(ebody[i]@Gr[j][1, 3]), ", ", eval(ebody[i]@Gr[j][2, 1]), ", ", eval(ebody[i]@Gr[j][2, 2]), ", ", eval(ebody[i]@Gr[j][2, 3]), ", ", eval(ebody[i]@Gr[j][3, 1]), ", ", eval(ebody[i]@Gr[j][3, 2]), ", ", eval(ebody[i]@Gr[j][3, 3]), "\;", cr))
            ),
            for j:1 thru length(elastic_dof_idx[i]) do (
                for k:1 thru length(elastic_dof_idx[i]) do (
                    gentran(literal("    ", eval(body_name), ".Ge[", eval((k-1)*length(elastic_dof_idx[i])+j-1), "] << ", eval(ebody[i]@Ge[j][k][1]), ", ", eval(ebody[i]@Ge[j][k][2]), ", ", eval(ebody[i]@Ge[j][k][3]), "\;", cr))
                )
            ),
            for j:1 thru length(elastic_dof_idx[i]) do (
                for k:1 thru 6 do (
                    gentran(literal("    ", eval(body_name), ".Oe(", eval(j-1), ", ",  eval(k-1), ")= ", eval(ebody[i]@Oe[j][k]), "\; "))
                ),
                gentran(literal(cr))
            ),
            for j:1 thru length(elastic_dof_idx[i]) do (
                gentran(literal("    ", eval(body_name), ".K(", eval(j-1), ")= ", eval(ebody[i]@K[j]), "\; "))
            ),
            gentran(literal(cr)),
            for j:1 thru length(elastic_dof_idx[i]) do (
                gentran(literal("    ", eval(body_name), ".D(", eval(j-1), ")= ", eval(ebody[i]@D[j]), "\; "))
            ),
            gentran(literal(cr))
        ),
        gentran(literal("    body.push_back(&", eval(body_name), ")\;", cr)),
        gentran(literal(cr))
    )
)>>
}

void <<gentran(literal(eval(filename)))>>System::computeMotion() {
    // TODO write constant values only once
<<block([i, i_], 
    ?ccurrind\*: 4,
    if nbrdep > 0 then gentran(literal("// Dependant variables", cr)),
    for i:1 thru nbrdep do (
        i_: i-1,
        do_assign('p[i_], pi[i]),
        do_assign('pd[i_], pdi[i]),
        do_assign('pdd[i_], pddi[i]),
        gentran(literal(cr))))>>
        
<<block([i, i_, j, k], 
    ?ccurrind\*: 4,
    for i:1 thru nbrbody do (
        i_: i-1,
        for j:1 thru 3 do (
            for k:1 thru 3 do (
                do_assign(concat("body[", i_, "]->TG.linear()(", j-1, ", ", k-1, ")"), T0G[i][j,k])
            )
        ),
        for j:1 thru 3 do (
            do_assign(concat("body[", i_, "]->TG.translation()(", j-1, ")"), T0G[i][j,4])
        ),
        gentran(literal(cr)),

        for j:1 thru 3 do (
            do_assign(concat("body[", i_, "]->vG(", j-1, ")"), vG[i][j, 1])
        ),
        gentran(literal(cr)),

        for j:1 thru 3 do (
            do_assign(concat("body[", i_, "]->omega(", j-1, ")"), omega[i][j, 1])
        ),
        gentran(literal(cr)),

        for j:1 thru 3 do (
            do_assign(concat("body[", i_, "]->aG(", j-1, ")"), aG[i][j, 1])
        ),
        gentran(literal(cr)),

        for j:1 thru 3 do (
            do_assign(concat("body[", i_, "]->omegad(", j-1, ")"), omegad[i][j, 1])
        ),
        gentran(literal(cr)),
        for j:1 thru nbrdof do (
            j_: j-1,
            for k:1 thru 3 do (
                do_assign(concat("body[", i_, "]->vGpartial(", k-1, ", ", j_,")"), vGpartial[i, j][k, 1])
            )
        ),
        gentran(literal(cr)),
        for j:1 thru nbrdof do (
            j_: j-1,
            for k:1 thru 3 do (
                do_assign(concat("body[", i_, "]->omegapartial(", k-1, ", ", j_, ")"), omegapartial[i, j][k, 1])
            )
        ),
        
        if length(elastic_dof_idx[i])>0 then
            gentran(literal("    static_cast<ElasticBody*>(body[", eval(i_), "])->setEDOF(q, qd, qdd)\;", cr, cr)),
        
        if index_relative[i]=1 then (
            gentran(literal("    body[", eval(i_), "]->composeMotion()\;", cr))
        ),
        gentran(literal(cr)),
        gentran(literal(cr))
    )
)>>
}
