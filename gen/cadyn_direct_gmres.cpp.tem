<<gentran(literal("\/\* File generated form template cadyn_direct.cpp.tem on ", eval(timedate()), ". Do not edit! \*\/", cr))$>>
<<gentran(literal("\/\* Multibody system: ", eval(title), " \*\/", cr, cr))$>>

#include <string>
#include <map>
#include <fstream>
#include <iostream>
#include <stdlib.h>
#include <chrono>
#include <cstdio>
#include <ctime>

#include "NewmarkBeta_GMRES.hpp"

typedef double real_type;

#include "<<gentran(literal(eval(filename)))$>>_param.hpp"

#define mcond(c, a, x, b) ((c)? a:b)

typedef struct {
<<block([i], 
    for i:1 thru length(external) do
        gentran(literal("    real_type ", eval(external[i]), "\;", cr))
)$>>} externalData_t;

typedef struct {
<<block([i], 
    for i:1 thru length(external) do
        gentran(literal("    real_type ", eval(external[i]), "\;", cr)),
        
    for i:1 thru length(d_external) do
        gentran(literal("    real_type ", eval(d_external[i]), "\;", cr))
)$>>} externalDerivData_t;

class <<gentran(literal(eval(filename), ": public NewmarkBeta_GMRES<", eval(nbrdof), ", ", eval(nbrin), ", ", eval(length(y)), ", real_type, externalData_t>"))$>> {
public:
    typedef Eigen::Matrix<real_type, <<gentran(literal(eval(nbrdep)))$>>, 1> VecP;
    
    <<gentran(literal(eval(filename)))$>>();
        
    void precalcConsts();
    virtual VecQ computeResiduals(externalData_t &ext, const VecQ &qdd, const VecQ &qd, const VecQ &q) const;
    virtual VecQ calcJacobianProd(const VecQ &b) const;
    virtual void calcOut();
    
    <<gentran(literal(eval(filename), "Parameters"))$>> param;
    
// private:
    VecP p, pd, pdd;

<<block([i],
    gentran(literal("    class inputs_t {", cr)),
    gentran(literal("    public:", cr)),
    gentran(literal("        inputs_t(")),
    for i:1 thru nbrin do (
        gentran(literal("real_type &", eval(u[i]))),
        if i#nbrin then
            gentran(literal(", "))
    ),            
    gentran(literal(") : ")),
    for i:1 thru nbrin do (
        gentran(literal(eval(u[i]), "(", eval(u[i]), ")")),
        if i#nbrin then
            gentran(literal(", "))
    ),            
    gentran(literal(" {}\;", cr, cr)),
    for i:1 thru nbrin do (
        gentran(literal("        real_type &", eval(u[i]), "\;", cr))
    ),            
    gentran(literal("    } inputs\;", cr)),
        
    if default_states=0 then (
        gentran(literal(cr, "    struct states_t {", cr)),
        gentran(literal("    public:", cr)),
        gentran(literal("        states_t(")),
        for i:1 thru nbrdof do (
            gentran(literal("real_type &", eval(states[i]), ", real_type &", eval(states_d[i]), ", real_type &", eval(states_dd[i]))),
            if i#nbrdof then
                gentran(literal(", "))
        ),            
        gentran(literal(") : ")),
        for i:1 thru nbrdof do (
            gentran(literal(eval(states[i]), "(", eval(states[i]), "), ", eval(states_d[i]),"(", eval(states_d[i]), "), ", eval(states_dd[i]),"(", eval(states_dd[i]), ")")),
            if i#nbrdof then
                gentran(literal(", "))
        ),            
        gentran(literal(" {}\;", cr, cr)),
                              
        for i:1 thru nbrdof do (
            gentran(literal("        real_type &", eval(states[i]), "\;", cr)),
            gentran(literal("        real_type &", eval(states_d[i]), "\;", cr)),
            gentran(literal("        real_type &", eval(states_dd[i]), "\;", cr))
        ),            
        gentran(literal("    } states\;", cr, cr)),

        gentran(literal(cr, "    typedef struct {", cr)),
                              
        for i:1 thru nbrdof do (
            gentran(literal("        int ", eval(states[i]), "\;", cr))
        ),            
        gentran(literal("    } states_idx_type\;", cr))
    )
)$>>
    static const states_idx_type states_idx;
    
<<block([i], 
    for i:1 thru length(pre_calc_const) do
        gentran(literal("    real_type ", eval(first(pre_calc_const[i])), "\;", cr))
)$>>
};

const <<gentran(literal(eval(filename)))$>>::states_idx_type <<gentran(literal(eval(filename)))$>>::states_idx= {<<block([i], for i:1 thru nbrdof do (gentran(literal(eval(i-1))), if i#nbrdof then gentran(literal(", "))))$>>};

<<gentran(literal(eval(filename)))$>>::<<gentran(literal(eval(filename)))$>>() : 
    NewmarkBeta_GMRES("<<gentran(literal(eval(filename)))$>>", "<<gentran(literal(eval(title)))$>>"),
    param(),
<<block([i],
    gentran(literal("    inputs(")),
    for i:1 thru nbrin do (
        gentran(literal("u.data()[", eval(i-1), "]")),
        if i#nbrin then
            gentran(literal(", "))
    ),            
                    
    if default_states=0 then (
        gentran(literal("),", cr, "    states(")),
        for i:1 thru nbrdof do (
            gentran(literal("q.data()[", eval(i-1), "], qd.data()[", eval(i-1), "], qdd.data()[", eval(i-1), "]")),
            if i#nbrdof then
                gentran(literal(", "))
        )
    ),
    gentran(literal(")", cr))
)$>>{
<<block([i, i_, opt], 
        ccurrind: 4,
        save_subst_list: subst_list,
        subst_list: [],
        
        for i:1 thru nbrin do (
            i_: i-1,
            do_assign(concat("in_name[", i_, "]"), concat("\"", u[i], "\""))
        ),
        if default_states=0 then (
            gentran(literal(cr)),
            for i:1 thru nbrdof do (
                i_: i-1,
                do_assign(concat("state_name[", i_, "]"), concat("\"", states[i], "\""))
            )
        ),
        subst_list: save_subst_list
)$>>}

typedef <<gentran(literal(eval(filename)))$>>::inputs_t inputs_t;
typedef <<gentran(literal(eval(filename)))$>>::states_t states_t;
typedef <<gentran(literal(eval(filename)))$>>Parameters params_t;
<<block([], 
    if length(external) > 0 then (
        gentran(literal("#include \"", eval(filename), "_Externals.hpp\""))
    )
)$>>

<<gentran(literal(eval(filename)))$>>::VecQ <<gentran(literal(eval(filename)))$>>::computeResiduals(externalData_t &ext, const VecQ &qdd, const VecQ &qd, const VecQ &q) const  {
    VecQ f_(nbrdof);
    
<<block([], 
    if length(external) > 0 then (
        gentran(literal("    calculateExternal(ext, inputs, states, param)\;", cr, cr))
    )
)$>>
    {
<<block([i, i_, opt], 
    ccurrind: 8,

    gentran(literal("    // Dependant variables", cr)),
    if nbrdep > 0 then (
        gentran("    {", literal(cr)),
                    
        opt: genopt([pi, pdi, pddi]),
        gentran(literal(cr)),

        for i:1 thru nbrdep do (
            i_: i-1,
            do_assign('p[i_], opt[1][i]),
            do_assign('pd[i_], opt[2][i]),
            do_assign('pdd[i_], opt[3][i]),
            gentran(literal(cr))
        ),
        gentran("    }", literal(cr))        
    )
)$>>
    }
    {
<<block([i, i_, opt], 
    ccurrind: 8,

    opt: genopt([f]),
    gentran(literal(cr)),

    for i:1 thru nbrdof do (
        i_: i-1,
        do_assign(concat("f_[", i_, "]"), opt[1][i])
    )
)$>>
    }

    return f_;
}


<<gentran(literal(eval(filename)))$>>::VecQ <<gentran(literal(eval(filename)))$>>::calcJacobianProd(const VecQ &b) const {
    externalDerivData_t ext;

    VecQ Dq= alphaK * b;
    VecQ Dqd= alphaC * b;
    VecQ Dqdd= alphaM * b;

    VecQ df;

<<block([], 
    if length(external) > 0 then (
        gentran(literal("    calculateExternalWithDeriv(ext, inputs, states, param)\;", cr))
    )
)$>>
    {
<<block([i, i_, opt], 
    ccurrind: 8,

    gentran(literal("    // Dependant variables", cr)),
    if nbrdep > 0 then (
        gentran("    {", literal(cr)),
                    
        opt: genopt([pi, pdi, pddi]),
        gentran(literal(cr)),

        for i:1 thru nbrdep do (
            i_: i-1,
            do_assign('p[i_], opt[1][i]),
            do_assign('pd[i_], opt[2][i]),
            do_assign('pdd[i_], opt[3][i]),
            gentran(literal(cr))
        ),
        gentran("    }", literal(cr))        
    )
)$>>
    }
    {
<<block([i, i_, j, j_, opt], 
    ccurrind: 8,
    
    /* TODO: if nbrdep > 0 then ( */
    gentran(literal("    // TODO: Dependant variables are missing !", cr, cr)),

    opt: genopt([df]),
    gentran(literal(cr)),

    for i:1 thru nbrdof do (
        i_: i-1,
        do_assign(concat("df[", i_, "]"), opt[1][i])
    )
)$>>
    }
    
    for(int idof= 0; idof < nbrdof; idof++) {
        if(doflocked[idof]) {
            df[idof]= 0.0;
        }
    }
    
    return df;
}

void <<gentran(literal(eval(filename)))$>>::calcOut() {
    {
<<block([opt], 
    ccurrind: 8,
    
    opt: genopt([y]),
        
    for i:1 thru length(y) do (
        i_: i-1,
        do_assign(concat("y[", i_, "]"), opt[1][i])
    )
)$>>
    }
}

